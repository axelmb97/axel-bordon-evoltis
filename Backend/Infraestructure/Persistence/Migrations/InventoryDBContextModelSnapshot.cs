// <auto-generated />
using System;
using Infraestructure.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Persistence.Migrations
{
    [DbContext(typeof(InventoryDBContext))]
    partial class InventoryDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.EmployeeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 5, 8, 35, 22, 347, DateTimeKind.Local).AddTicks(7140),
                            File = "abordon",
                            Lastname = "Bordon Alvarez",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Axel Mariano",
                            PhoneNumber = "3515419198"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 5, 8, 35, 22, 347, DateTimeKind.Local).AddTicks(7163),
                            File = "vherrera",
                            Lastname = "Herrera",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Victoria Soledad",
                            PhoneNumber = "3515419198"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 5, 8, 35, 22, 347, DateTimeKind.Local).AddTicks(7164),
                            File = "lbordon",
                            Lastname = "Bordon",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lucas",
                            PhoneNumber = "3515419198"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 5, 8, 35, 22, 347, DateTimeKind.Local).AddTicks(7372),
                            Description = "16 RAM 256gb",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Notebook Bangho"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 5, 8, 35, 22, 347, DateTimeKind.Local).AddTicks(7374),
                            Description = "128GB almacenamiento, 6GB RAM",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Smartphone Samsung Galaxy"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 5, 8, 35, 22, 347, DateTimeKind.Local).AddTicks(7375),
                            Description = "256GB almacenamiento, pantalla Retina",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tablet Apple iPad"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 9, 5, 8, 35, 22, 347, DateTimeKind.Local).AddTicks(7376),
                            Description = "Full HD, 75Hz, IPS",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Monitor Dell 24\""
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 9, 5, 8, 35, 22, 347, DateTimeKind.Local).AddTicks(7377),
                            Description = "RGB, switches mecánicos",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Teclado mecánico Logitech"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 9, 5, 8, 35, 22, 347, DateTimeKind.Local).AddTicks(7378),
                            Description = "DPI ajustable, 2.4GHz",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mouse inalámbrico Razer"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 9, 5, 8, 35, 22, 347, DateTimeKind.Local).AddTicks(7379),
                            Description = "1TB, NVMe M.2",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Disco SSD Kingston"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 9, 5, 8, 35, 22, 347, DateTimeKind.Local).AddTicks(7380),
                            Description = "Cancelación de ruido, Bluetooth",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Auriculares Bose"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 9, 5, 8, 35, 22, 347, DateTimeKind.Local).AddTicks(7381),
                            Description = "24MP, 4K video, lente 18-55mm",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cámara Sony Alpha"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 9, 5, 8, 35, 22, 347, DateTimeKind.Local).AddTicks(7382),
                            Description = "GPS, 44mm, resistente al agua",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Smartwatch Apple Watch"
                        });
                });

            modelBuilder.Entity("Domain.Entities.PurchaseOrderDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PriceByUnit")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ProductEntityId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderEntityId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductEntityId");

                    b.HasIndex("PurchaseOrderEntityId");

                    b.ToTable("PurchaseOrderDetails");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseOrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SupplierEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierEntityId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("Domain.Entities.ReceptionDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProductEntityId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityReceived")
                        .HasColumnType("int");

                    b.Property<int>("ReceptionEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductEntityId");

                    b.HasIndex("ReceptionEntityId");

                    b.ToTable("ReceptionDetails");
                });

            modelBuilder.Entity("Domain.Entities.ReceptionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmployeeEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PurchaseOrderEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeEntityId");

                    b.HasIndex("PurchaseOrderEntityId")
                        .IsUnique();

                    b.ToTable("Receptions");
                });

            modelBuilder.Entity("Domain.Entities.StockEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProductEntityId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductEntityId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Domain.Entities.SupplierEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "1234 Tech Park Avenue, San Francisco, CA",
                            BusinessName = "Tech Distributions Inc.",
                            CreatedAt = new DateTime(2024, 9, 5, 8, 35, 22, 347, DateTimeKind.Local).AddTicks(7412),
                            Description = "Distribuidor de hardware y componentes electrónicos",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Address = "5678 Innovation Blvd, Austin, TX",
                            BusinessName = "Gadget World",
                            CreatedAt = new DateTime(2024, 9, 5, 8, 35, 22, 347, DateTimeKind.Local).AddTicks(7414),
                            Description = "Proveedor de gadgets y accesorios electrónicos",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Address = "91011 Silicon Valley, Palo Alto, CA",
                            BusinessName = "CompuParts Ltd.",
                            CreatedAt = new DateTime(2024, 9, 5, 8, 35, 22, 347, DateTimeKind.Local).AddTicks(7416),
                            Description = "Especialistas en componentes para PCs y laptops",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Address = "1213 Tech Drive, New York, NY",
                            BusinessName = "Global Tech Supplies",
                            CreatedAt = new DateTime(2024, 9, 5, 8, 35, 22, 347, DateTimeKind.Local).AddTicks(7417),
                            Description = "Proveedor global de soluciones tecnológicas",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Address = "1415 Digital Lane, Seattle, WA",
                            BusinessName = "Smart Solutions Co.",
                            CreatedAt = new DateTime(2024, 9, 5, 8, 35, 22, 347, DateTimeKind.Local).AddTicks(7419),
                            Description = "Proveedor de dispositivos inteligentes y tecnología IoT",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entities.PurchaseOrderDetailEntity", b =>
                {
                    b.HasOne("Domain.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PurchaseOrderEntity", "Purchase")
                        .WithMany("Details")
                        .HasForeignKey("PurchaseOrderEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseOrderEntity", b =>
                {
                    b.HasOne("Domain.Entities.SupplierEntity", "Supplier")
                        .WithMany("Orders")
                        .HasForeignKey("SupplierEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Domain.Entities.ReceptionDetailEntity", b =>
                {
                    b.HasOne("Domain.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ReceptionEntity", "Reception")
                        .WithMany("Details")
                        .HasForeignKey("ReceptionEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("Domain.Entities.ReceptionEntity", b =>
                {
                    b.HasOne("Domain.Entities.EmployeeEntity", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PurchaseOrderEntity", "Purchase")
                        .WithOne("Reception")
                        .HasForeignKey("Domain.Entities.ReceptionEntity", "PurchaseOrderEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Domain.Entities.StockEntity", b =>
                {
                    b.HasOne("Domain.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseOrderEntity", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("Domain.Entities.ReceptionEntity", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Domain.Entities.SupplierEntity", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
